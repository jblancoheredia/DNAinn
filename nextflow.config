/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                                      DNAinn Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                          Default config options for all compute environments
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    wes                                                     = false
    input                                                   = null
    seq_type                                                = "dna"
    ethnicity                                               = "Unknown"     // Caucasian, Black, Asian or Unknown as default 
    seq_center                                              = "MSKCC_IGO"
    seq_library                                             = "Av1"
    seq_platform                                            = "ILLUMINA"
    run_downsamplings                                       = false
    run_umiprocessing                                       = false
    run_dedupandrecal                                       = false
    run_copynumberalt                                       = false
    run_variantdscvry                                       = false
    run_strctrlvarnts                                       = false
    run_immunoncology                                       = false
    run_telomerefeats                                       = false
    downsampling_total_reads                                = null

    // MultiQC options
    multiqc_logo                                            = "${projectDir}/assets/DNAinn_logo_light.png"
    multiqc_title                                           = null
    multiqc_config                                          = null
    max_multiqc_email_size                                  = "25.MB"
    multiqc_methods_description                             = null

    // Telomere Features
    
    // Boilerplate options
    help                                                    = false
    email                                                   = null
    outdir                                                  = null
    version                                                 = false
    hook_url                                                = null
    email_on_fail                                           = null
    plaintext_email                                         = false
    monochrome_logs                                         = false
    publish_dir_mode                                        = 'copy'

    // Config options
    config_profile_url                                      = null
    config_profile_name                                     = null
    custom_config_version                                   = 'master'
    config_profile_contact                                  = null
    config_profile_description                              = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    memory                                                  = '8.GB'
    max_cpus                                                = 12
    max_time                                                = '24.h'
    max_memory                                              = '64.GB'

    // Schema validation default options
    validate_params                                         = true
    validationLenientMode                                   = false
    validationShowHiddenParams                              = false
    validationSchemaIgnoreParams                            = 'igenomes_base,monochromeLogs,fasta,fasta_fai,bwa,dict'
    validationFailUnrecognisedParams                        = false

    // nf-validation warning bug
    monochromeLogs                                          = null

    // fgbio options
    f2b_umi_qual_tag                                        = 'QX'
    f2b_umi_tag                                             = 'RX'
    f2b_read_structure                                      = '3M2S+T 3M2S+T'

    correct_max_mismatch                                    = 1
    correct_min_distance                                    = 1
    correct_min_corrected                                   = '0.5'

    group_edits                                             = 0             // default number of allowable edits for fgbio's GROUPREADSBYUMI
    group_strategy                                          = 'paired'      // default strategy fgbio's GROUPREADSBYUMI
    group_min_map_q                                         = 0             // default is 0 in duplicate marking mode and 1 otherwise in fgbio's GROUPREADSBYUMI
    group_mark_duplicates                                   = true          // default is false for fgbio's GROUPREADSBYUMI
    group_include_secondary                                 = false         // default is true in duplicate marking mode and false otherwise for fgbio's GROUPREADSBYUMI
    group_allow_inter_contig                                = true          // default is true DEPRECATED: this option will be removed in future versions and inter-contig reads will be automatically processed.
    group_include_non_pf_reads                              = false
    group_include_supplementary                             = false         // default is true in duplicate marking mode and false otherwise for fgbio's GROUPREADSBYUMI

    call_min_baseq                                          = 10            // default minimum input base quality for fgbio's CALL*CONSENSUSREADS tools
    call_min_reads                                          = '1 1 0'       // default minimum input reads for fgbio's CALL*CONSENSUSREADS tools
    call_error_rate_pre_umi                                 = 40
    call_error_rate_post_umi                                = 35

    filter_min_reads                                        = 2
    filter_min_base_quality                                 = 1
    filter_max_base_error_rate                              = 0.1
    filter_max_read_error_rate                              = 0.025
    filter_max_no_call_fraction                             = 0.1

    // Copy Number
    cf_coeff                                                = 0.05          // default value for Control-FREEC
    cf_ploidy                                               = "2"           // default value for Control-FREEC
    cf_mincov                                               = 0             // ControlFreec default values
    cf_window                                               = null          // by default we are not using this in Control-FREEC
    cf_minqual                                              = 0             // ControlFreec default values
    cf_contamination                                        = 0             // default value for Control-FREEC
    cf_contamination_adjustment                             = "FALSE"       // by default we are not using this in Control-FREEC

}

includeConfig 'conf/base.config'

profiles {

    crater {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/research/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'        

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 1
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]" -e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 384
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }

        params {
            // Genome
            genome                                          = "GRCh38"
            refs_dir                                        = '/research/blancoj/.HGREF'
            tools_dir                                       = '/research/blancoj/.TOOLS'
            read_length                                     = 100
            genome_base                                     = "${refs_dir}/${params.genome}"
            save_reference                                  = false
            ensembl_version                                 = 112

            // More genome options
            gtf                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.gtf"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            dict                                            = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            baits                                           = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.sort.bed"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            chrgtf                                          = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf"
            banding                                         = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.banding.tsv"
            chr_fai                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.chr.fai"
            chr6_fa                                         = "${params.genome_base}/hla_data/chr6/Homo_sapiens.${params.genome}.${params.ensembl_version}.dna.chromosome.6.fa"
            imgt_fa                                         = "${params.genome_base}/hla_data/imgt_hla/hla_gen.fa"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            targets                                         = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            chr6_fai                                        = "${params.genome_base}/hla_data/chr6/Homo_sapiens.${params.genome}.${params.ensembl_version}.dna.chromosome.6.fa.fai"
            imgt_fai                                        = "${params.genome_base}/hla_data/imgt_hla/hla_gen.fa.fai"
            msi_list                                        = "${params.genome_base}/msisensorpro/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.msisensor_scan.list"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.sort.bed"
            baits_bed                                       = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.bed"
            kraken2db                                       = "${params.genome_base}/kraken2db/"
            by_chr_dir                                      = "${params.genome_base}/ensembl/by_chromosome/"
            rep_regions                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.repeats.tsv"
            targets_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.bed"
            transcripts                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.cdna.all.transcripts"
            chromosomes                                     = "${params.genome_base}/${params.genome}_chromosomes_lengths.txt"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            mappability                                     = "${params.genome_base}/mappability/k100.Umap.MultiTrackMappability.bw"
            allowlist_bed                                   = "${params.genome_base}/allowlist/Homo_sapiens.${params.genome}.allowlistgenes.bed"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            msi_baseline_TCGA                               = "${params.genome_base}/msisensorpro/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.baseline_TCGA-v1.3.tsv"
            intervals_bed_gunzip                            = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            intervals_bed_gunzip_index                      = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"

            // Path to references
            bwa                                             = "${params.genome_base}/bwa"
            bwa2                                            = "${params.genome_base}/bwa2"
            hgnc_ref                                        = "${params.genome_base}/hgnc/hgnc_complete_set.txt"
            bwa2_chr6                                       = "${params.genome_base}/hla_data/chr6"
            bwa2_imgt                                       = "${params.genome_base}/hla_data/imgt_hla"
            hgnc_date                                       = "${params.genome_base}/hgnc/HGNC-DB-timestamp.txt"
            kraken2db                                       = "${params.genome_base}/kraken2db"
            ensembl_ref                                     = "${params.genome_base}/ensembl"
            pon_directory                                   = "${params.genome_base}/gridss"
            bwa_dragen_hg38                                 = "${params.genome_base}/dragen/bwa"

            // Copy Number
            wigfile20                                       = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc20.wig.gz"
            wigfile50                                       = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc50.wig.gz"
            wigfile100                                      = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc100.wig.gz"
            cf_mappability                                  = "${params.genome_base}/controlfreec/out100m2_hg19.gem"
            normal_mpileup                                  = "${params.genome_base}/control_normal/NORMAL.${params.seq_library}.pileup.vcf.gz"
            normal_mpileup_tbi                              = "${params.genome_base}/control_normal/NORMAL.${params.seq_library}.pileup.vcf.gz.tbi"
            cnvkit_reference                                = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.reference.cnn"
            cnvkit_antitarget                               = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.antitarget.bed"
            cf_control_mpileup                              = "${params.genome_base}/controlfreec/control.mpileup.gz"

            // Variant Calling
            pon                                             = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.pon.vcf.gz"
            pon_tbi                                         = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.pon.vcf.gz.tbi"
            germres                                         = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.af-only-gnomad.vcf.gz"
            common_vcf                                      = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.common.vcf.gz"
            annotsv_dir                                     = "${params.genome_base}/annotsv/"
            germres_tbi                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.af-only-gnomad.vcf.gz.tbi"
            exclude_bed                                     = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.exclude.bed"
            vardict_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.8col.bed"
            blocklist_bed                                   = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            normal_fastq1                                   = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_R1_001.fastq.gz"
            normal_fastq2                                   = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_R2_001.fastq.gz"
            common_vcf_tbi                                  = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.common.vcf.gz.tbi"
            normal_con_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_con.bam"
            normal_con_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_con.bai"
            normal_dup_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_dup.bam"
            normal_dup_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_dup.bai"
            normal_sim_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_sim.bam"
            normal_sim_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_sim.bai"
            annotation_genes_bed                            = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.genes.bed"

            // Structural Variants
            cytobands                                       = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.cytobands.tsv"
            drawsv_chr                                      = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.chromosomes.csv"
            ilcoan_dir                                      = "${params.genome_base}/ilcoan/"
            annotations                                     = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.annotation.gtf"
            protein_domains                                 = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.protein_domains.gff3"
            allow_list_genes                                = "${params.genome_base}/allowlist/allowlistgenes.txt"

            // ImmunOncology
            hlala_graph                                     = "${params.tools_dir}/hla-la/graphs/PRG_MHC_GRCh38_withIMGT"
            optitype_image                                  = "${params.tools_dir}/optype/02_code/optitype_latest.sif"

        }
    }
    juno {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/juno/cmo/bergerlab/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'        

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 1
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]" -e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 384
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }

        params {
            // Genome
            genome                                          = "GRCh38"
            refs_dir                                        = "/juno/cmo/bergerlab/blancoj/.HGREF"
            tools_dir                                       = '/juno/cmo/bergerlab/blancoj/.TOOLS'
            read_length                                     = 100
            genome_base                                     = "${refs_dir}/${params.genome}"
            save_reference                                  = false
            ensembl_version                                 = 112

            // More genome options
            gtf                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.gtf"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            dict                                            = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            baits                                           = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.sort.bed"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            chrgtf                                          = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf"
            banding                                         = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.banding.tsv"
            chr_fai                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.chr.fai"
            chr6_fa                                         = "${params.genome_base}/hla_data/chr6/Homo_sapiens.${params.genome}.${params.ensembl_version}.dna.chromosome.6.fa"
            imgt_fa                                         = "${params.genome_base}/hla_data/imgt_hla/hla_gen.fa"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            targets                                         = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            chr6_fai                                        = "${params.genome_base}/hla_data/chr6/Homo_sapiens.${params.genome}.${params.ensembl_version}.dna.chromosome.6.fa.fai"
            imgt_fai                                        = "${params.genome_base}/hla_data/imgt_hla/hla_gen.fa.fai"
            msi_list                                        = "${params.genome_base}/msisensorpro/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.msisensor_scan.list"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.sort.bed"
            baits_bed                                       = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.bed"
            kraken2db                                       = "${params.genome_base}/kraken2db/"
            by_chr_dir                                      = "${params.genome_base}/ensembl/by_chromosome/"
            rep_regions                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.repeats.tsv"
            targets_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.bed"
            transcripts                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.cdna.all.transcripts"
            chromosomes                                     = "${params.genome_base}/${params.genome}_chromosomes_lengths.txt"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            mappability                                     = "${params.genome_base}/mappability/k100.Umap.MultiTrackMappability.bw"
            allowlist_bed                                   = "${params.genome_base}/allowlist/Homo_sapiens.${params.genome}.allowlistgenes.bed"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            msi_baseline_TCGA                               = "${params.genome_base}/msisensorpro/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.baseline_TCGA-v1.3.tsv"
            intervals_bed_gunzip                            = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            intervals_bed_gunzip_index                      = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"

            // Path to references
            bwa                                             = "${params.genome_base}/bwa"
            bwa2                                            = "${params.genome_base}/bwa2"
            hgnc_ref                                        = "${params.genome_base}/hgnc/hgnc_complete_set.txt"
            bwa2_chr6                                       = "${params.genome_base}/hla_data/chr6"
            bwa2_imgt                                       = "${params.genome_base}/hla_data/imgt_hla"
            hgnc_date                                       = "${params.genome_base}/hgnc/HGNC-DB-timestamp.txt"
            kraken2db                                       = "${params.genome_base}/kraken2db"
            ensembl_ref                                     = "${params.genome_base}/ensembl"
            pon_directory                                   = "${params.genome_base}/gridss"
            bwa_dragen_hg38                                 = "${params.genome_base}/dragen/bwa"

            // Copy Number
            wigfile20                                       = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc20.wig.gz"
            wigfile50                                       = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc50.wig.gz"
            wigfile100                                      = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc100.wig.gz"
            cf_mappability                                  = "${params.genome_base}/controlfreec/out100m2_hg19.gem"
            normal_mpileup                                  = "${params.genome_base}/control_normal/NORMAL.${params.seq_library}.pileup.vcf.gz"
            normal_mpileup_tbi                              = "${params.genome_base}/control_normal/NORMAL.${params.seq_library}.pileup.vcf.gz.tbi"
            cnvkit_reference                                = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.reference.cnn"
            cnvkit_antitarget                               = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.antitarget.bed"
            cf_control_mpileup                              = "${params.genome_base}/controlfreec/control.mpileup.gz"

            // Variant Calling
            pon                                             = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.pon.vcf.gz"
            pon_tbi                                         = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.pon.vcf.gz.tbi"
            germres                                         = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.af-only-gnomad.vcf.gz"
            common_vcf                                      = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.common.vcf.gz"
            annotsv_dir                                     = "${params.genome_base}/annotsv/"
            germres_tbi                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.af-only-gnomad.vcf.gz.tbi"
            exclude_bed                                     = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.exclude.bed"
            vardict_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.8col.bed"
            blocklist_bed                                   = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            normal_fastq1                                   = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_R1_001.fastq.gz"
            normal_fastq2                                   = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_R2_001.fastq.gz"
            common_vcf_tbi                                  = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.common.vcf.gz.tbi"
            normal_con_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_con.bam"
            normal_con_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_con.bai"
            normal_dup_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_dup.bam"
            normal_dup_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_dup.bai"
            normal_sim_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_sim.bam"
            normal_sim_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_sim.bai"
            annotation_genes_bed                            = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.genes.bed"

            // Structural Variants
            cytobands                                       = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.cytobands.tsv"
            drawsv_chr                                      = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.chromosomes.csv"
            ilcoan_dir                                      = "${params.genome_base}/ilcoan/"
            annotations                                     = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.annotation.gtf"
            protein_domains                                 = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.protein_domains.gff3"
            allow_list_genes                                = "${params.genome_base}/allowlist/allowlistgenes.txt"

            // ImmunOncology
            hlala_graph                                     = "${params.tools_dir}/hla-la/graphs/PRG_MHC_GRCh38_withIMGT"
            optitype_image                                  = "${params.tools_dir}/optype/02_code/optitype_latest.sif"
        }
    }
    iris {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/data1/bergerm1/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '600m'        

        process {
            cache                                           = "lenient"
            queue                                           = 'test01'
            executor                                        = 'slurm'
            partition                                       = 'test01'
            maxRetries                                      = 3
            afterScript                                     = "sleep 60"
            errorStrategy                                   = { task.exitStatus == 0 ? "retry" : "terminate" }
            clusterOptions                                  = '-e .command.err'
        }
        
        executor {
            name                                            = 'slurm'
            queue                                           = 'test01'
            partition                                       = 'test01'
            queueSize                                       = 2000
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            exitReadTimeout                                 = "30 min"
            submitRateLimit                                 = '10/1sec'
            jobName                                         = {
                                                            task.name
                                                                .replace("[", "(")
                                                                .replace("]", ")")
                                                                .replace(" ", "_")
            }
        }

        params {
            // Cluster Tailored
            genome_base                                     = "${refs_dir}/${params.genome}"
            ensembl_version                                 = 112
            // Genome
            genome                                          = "GRCh38"
            refs_dir                                        = '/data1/bergerm1/blancoj/.HGREF'
            tools_dir                                       = '/data1/bergerm1/blancoj/.TOOLS'
            read_length                                     = 100
            genome_base                                     = "${refs_dir}/${params.genome}"
            save_reference                                  = false
            ensembl_version                                 = 112

            // More genome options
            gtf                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.gtf"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            dict                                            = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            baits                                           = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.sort.bed"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            chrgtf                                          = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf"
            banding                                         = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.banding.tsv"
            chr_fai                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.chr.fai"
            chr6_fa                                         = "${params.genome_base}/hla_data/chr6/Homo_sapiens.${params.genome}.${params.ensembl_version}.dna.chromosome.6.fa"
            imgt_fa                                         = "${params.genome_base}/hla_data/imgt_hla/hla_gen.fa"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            targets                                         = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            chr6_fai                                        = "${params.genome_base}/hla_data/chr6/Homo_sapiens.${params.genome}.${params.ensembl_version}.dna.chromosome.6.fa.fai"
            imgt_fai                                        = "${params.genome_base}/hla_data/imgt_hla/hla_gen.fa.fai"
            msi_list                                        = "${params.genome_base}/msisensorpro/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.msisensor_scan.list"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.sort.bed"
            baits_bed                                       = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.bed"
            kraken2db                                       = "${params.genome_base}/kraken2db/"
            by_chr_dir                                      = "${params.genome_base}/ensembl/by_chromosome/"
            rep_regions                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.repeats.tsv"
            targets_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.bed"
            transcripts                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.cdna.all.transcripts"
            chromosomes                                     = "${params.genome_base}/${params.genome}_chromosomes_lengths.txt"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            mappability                                     = "${params.genome_base}/mappability/k100.Umap.MultiTrackMappability.bw"
            allowlist_bed                                   = "${params.genome_base}/allowlist/Homo_sapiens.${params.genome}.allowlistgenes.bed"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            msi_baseline_TCGA                               = "${params.genome_base}/msisensorpro/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.baseline_TCGA-v1.3.tsv"
            intervals_bed_gunzip                            = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            intervals_bed_gunzip_index                      = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"

            // Path to references
            bwa                                             = "${params.genome_base}/bwa"
            bwa2                                            = "${params.genome_base}/bwa2"
            hgnc_ref                                        = "${params.genome_base}/hgnc/hgnc_complete_set.txt"
            bwa2_chr6                                       = "${params.genome_base}/hla_data/chr6"
            bwa2_imgt                                       = "${params.genome_base}/hla_data/imgt_hla"
            hgnc_date                                       = "${params.genome_base}/hgnc/HGNC-DB-timestamp.txt"
            kraken2db                                       = "${params.genome_base}/kraken2db"
            ensembl_ref                                     = "${params.genome_base}/ensembl"
            pon_directory                                   = "${params.genome_base}/gridss"
            bwa_dragen_hg38                                 = "${params.genome_base}/dragen/bwa"

            // Copy Number
            wigfile20                                       = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc20.wig.gz"
            wigfile50                                       = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc50.wig.gz"
            wigfile100                                      = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.gc100.wig.gz"
            cf_mappability                                  = "${params.genome_base}/controlfreec/out100m2_hg19.gem"
            normal_mpileup                                  = "${params.genome_base}/control_normal/NORMAL.${params.seq_library}.pileup.vcf.gz"
            normal_mpileup_tbi                              = "${params.genome_base}/control_normal/NORMAL.${params.seq_library}.pileup.vcf.gz.tbi"
            cnvkit_reference                                = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.reference.cnn"
            cnvkit_antitarget                               = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.antitarget.bed"
            cf_control_mpileup                              = "${params.genome_base}/controlfreec/control.mpileup.gz"

            // Variant Calling
            pon                                             = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.pon.vcf.gz"
            pon_tbi                                         = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.pon.vcf.gz.tbi"
            germres                                         = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.af-only-gnomad.vcf.gz"
            common_vcf                                      = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.common.vcf.gz"
            annotsv_dir                                     = "${params.genome_base}/annotsv/"
            germres_tbi                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.af-only-gnomad.vcf.gz.tbi"
            exclude_bed                                     = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.exclude.bed"
            vardict_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.8col.bed"
            blocklist_bed                                   = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            normal_fastq1                                   = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_R1_001.fastq.gz"
            normal_fastq2                                   = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_R2_001.fastq.gz"
            common_vcf_tbi                                  = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.common.vcf.gz.tbi"
            normal_con_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_con.bam"
            normal_con_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_con.bai"
            normal_dup_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_dup.bam"
            normal_dup_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_dup.bai"
            normal_sim_bam                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_sim.bam"
            normal_sim_bai                                  = "${params.genome_base}/control_normal/NORMAL_${params.seq_library}_sim.bai"
            annotation_genes_bed                            = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.genes.bed"

            // Structural Variants
            cytobands                                       = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.cytobands.tsv"
            drawsv_chr                                      = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.chromosomes.csv"
            ilcoan_dir                                      = "${params.genome_base}/ilcoan/"
            annotations                                     = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.annotation.gtf"
            protein_domains                                 = "${params.genome_base}/drawsv/Homo_sapiens.${params.genome}.protein_domains.gff3"
            allow_list_genes                                = "${params.genome_base}/allowlist/allowlistgenes.txt"

            // ImmunOncology
            hlala_graph                                     = "${params.tools_dir}/hla-la/graphs/PRG_MHC_GRCh38_withIMGT"
            optitype_image                                  = "${params.tools_dir}/optype/02_code/optitype_latest.sif"
        }
    }
    debug {
        cleanup                                             = false
        dumpHashes                                          = true
        process.beforeScript                                = 'echo $HOSTNAME'
        nextflow.enable.configProcessNamesValidation        = true
    }
    conda {
        conda.enabled                                       = true
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        conda.channels                                      = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled                                   = false
    }
    mamba {
        conda.enabled                                       = true
        conda.useMamba                                      = true
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    docker {
        docker.enabled                                      = true
        conda.enabled                                       = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
        docker.runOptions                                   = '-u $(id -u):$(id -g) --platform=linux/amd64 -v /juno/cmo/bergerlab/blancoj/TMPDIR' // /Users/Shared/TMPDIR:/tmp
    }
    arm {
        docker.runOptions                                   = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 1
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]"'
            clusterOptions                                  = '-e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 384
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }
    }
    podman {
        podman.enabled                                      = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    shifter {
        shifter.enabled                                     = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    charliecloud {
        charliecloud.enabled                                = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
    }
    apptainer {
        apptainer.enabled                                   = true
        apptainer.autoMounts                                = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
    }
    wave {
        apptainer.ociAutoPull                               = true
        singularity.ociAutoPull                             = true
        wave.enabled                                        = true
        wave.freeze                                         = true
        wave.strategy                                       = 'conda,container'
    }
    gitpod {
        executor.name                                       = 'local'
        executor.cpus                                       = 4
        executor.memory                                     = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
podman.registry                                             = 'quay.io'
apptainer.registry                                          = 'quay.io'
singularity.registry                                        = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-prov@1.2.2'       // Provenance reports for pipeline runs
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE                                        = 1
    R_PROFILE_USER                                          = "/.Rprofile"
    R_ENVIRON_USER                                          = "/.Renviron"
    JULIA_DEPOT_PATH                                        = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp                                         = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled                                                 = true
    file                                                    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled                                                 = true
    file                                                    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled                                                 = true
    file                                                    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled                                                 = true
    file                                                    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
prov {
    enabled                                                 = true
    formats {
        bco {
            file                                            = "${params.outdir}/pipeline_info/manifest_${trace_timestamp}.bco.json"
        }
    }
}

manifest {
    name                                                    = 'mskcc/dnainn'
    author                                                  = 'blancoj@mskcc.org'
    homePage                                                = 'https://github.com/mskcc/dnainn'
    description                                             = 'MSKCC-CMO-Innovation DNAseq analysis pipeline --> DNAinn is a comprehensive analysis pipeline Nextflow-borne implemented for modern genome references, specifically GRCh38 on it`s 14th version wich includes information developted by the T2T project. It is designed to be highly flexible and can be run on a wide range of computing environments, from a single laptop, to a computing cluster (HPC) or cloud computing environments (AWS). This pipeline was created using nf-core tools and following it`s policies and regulations.'
    mainScript                                              = 'main.nf'
    nextflowVersion                                         = '!>=23.04.0'
    version                                                 = '1.1.0'
    doi                                                     = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
includeConfig 'conf/modules_vc.config'
includeConfig 'conf/modules_cn.config'
includeConfig 'conf/modules_sv.config'
includeConfig 'conf/modules_io.config'
includeConfig 'conf/modules_tf.config'
if (params.run_umiprocessing) {
    includeConfig 'conf/modules_up.config'
} else {
    includeConfig 'conf/modules_dr.config'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
/*
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                  END
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/