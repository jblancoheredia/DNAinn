/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Available keys to override module options:
            ext.args   = Additional arguments appended to command in module.
            ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
            ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
            ext.prefix = File name prefix for output files.
-------------------------------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'MANTA_SOMATIC' {
        ext.prefix = { "${meta.id}.manta" }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/manta/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MANTA_TUMORONLY' {
        ext.args = { "" }
        ext.prefix = { "${meta.id}.manta" }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/manta/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TIDDIT_SV' {
        ext.args   = { '-c 9999' }
        ext.prefix = { "${meta.id}.tiddit.unfiltered" }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/tiddit/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TABIX_BGZIPTABIX' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/tiddit/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DELLY' {
        ext.args   = { '-t ALL -a 100000' }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/delly/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SVABA' {
        ext.args   = { "-G bwa/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"}
        ext.args2  = { '-C 100000 -L 2 -x 0 --read-tracking' }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/svaba/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GRIDSS' {
        ext.args   = { '--jvmheap 30g --otherjvmheap 16g --maxcoverage 100000 --picardoptions VALIDATION_STRINGENCY=LENIENT' }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/gridss/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SURVIVOR_MERGE' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/merge/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_BEDTOINTERVALLIST' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/merge/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'RECALL_SV' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/recall/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SVSOMF' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/recall/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SURVIVOR_FILTER' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/filter/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SURVIVOR_STATS' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/stats/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ANNOTSV_ANNOTSV' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/annotate/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'IANNOTATESV' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/iannotatesv/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DRAWSV' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/drawsv/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SERACARE_CHECKUP' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/strctrlvarnts/seracare_checkup/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}